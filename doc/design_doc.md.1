# AI Agent Flow 详细设计文档

## 1. 系统架构概述
本系统实现了一个基于OpenAI的AI Agent工作流，主要包含以下组件：
- **Agent核心**：协调任务分解、执行和验证
- **OpenAI交互模块**：处理与OpenAI API的通信
- **MCP服务**：管理工具注册和执行
- **工具集**：提供基础操作能力（如文件读写）

```mermaid
sequenceDiagram
    participant User as 用户
    participant Agent as Agent执行体
    participant MCPService as MCP服务
    participant Tools as 工具集
    participant LLM as 大模型

    User->>Agent: 原始需求
    Agent->>LLM: 请求任务分解
    LLM-->>Agent: 结构化任务清单
    Agent->>User: 请求子任务确认
    User->>Agent: 确认子任务
    
    loop 每个子任务
        alt 需要工具操作
            Agent-->>LLM: 生成工具指令
            LLM-->>Agent: MCP格式指令
            Agent->>MCPService: 发送指令
            MCPService->>Tools: 执行操作
            Tools-->>MCPService: 操作结果
            MCPService-->>Agent: 结构化结果
        else 需要AI生成
            Agent->>LLM: 请求内容生成
            LLM-->>Agent: 生成结果
        end
        
        Agent->>LLM: 请求结果验证
        LLM-->>Agent: 验证报告
    end
    
    Agent->>User: 最终交付结果
```

## 2. 核心模块说明

### 2.1 main.py (Agent核心)
- `Agent`类：实现任务处理全流程
  - `decompose_task()`: 请求LLM分解任务
  - `confirm_subtasks()`: 用户确认子任务
  - `execute_subtasks()`: 执行子任务（工具/AI生成）
  - `validate_result()`: 验证任务结果
  - `deliver_results()`: 最终结果交付

### 2.2 openai_utils.py (OpenAI交互)
- `call_openai()`: 通用OpenAI API调用
- `generate_content()`: 内容生成专用接口

### 2.3 mcp_service.py (MCP服务)
- `ToolRegistry`类：工具注册管理
  - `register_tool()`: 注册新工具
  - `execute_tool()`: 执行工具操作
- `execute_protocol()`: 执行MCP格式指令

## 3. 主要类和方法说明

### Agent类 (main.py)
| 方法 | 参数 | 返回值 | 说明 |
|------|------|--------|------|
| `decompose_task` | user_input: str | bool | 将用户需求分解为JSON格式子任务 |
| `confirm_subtasks` | 无 | bool | 向用户展示并确认子任务 |
| `execute_subtasks` | 无 | bool | 顺序执行所有子任务 |
| `validate_result` | task: dict, result: any | bool | 验证子任务执行结果 |
| `deliver_results` | 无 | dict | 返回所有子任务结果 |

### ToolRegistry类 (mcp_service.py)
| 方法 | 参数 | 返回值 | 说明 |
|------|------|--------|------|
| `register_tool` | name: str, function: callable | 无 | 注册工具函数 |
| `execute_tool` | tool_name: str, parameters: dict | dict | 执行指定工具 |

## 4. 使用示例

```python
# 初始化Agent
agent = Agent()

# 处理用户需求
user_input = "创建一个文件管理系统"
agent.decompose_task(user_input)

if agent.confirm_subtasks():
    agent.execute_subtasks()
    results = agent.deliver_results()
    print(results)
```

## 5. 扩展指南
1. **添加新工具**：
   - 在mcp_service.py中定义新工具函数
   - 使用`tool_registry.register_tool()`注册
   
2. **调整任务分解**：
   - 修改main.py中`decompose_task()`的prompt模板
   
3. **增强验证逻辑**：
   - 修改`validate_result()`中的验证prompt